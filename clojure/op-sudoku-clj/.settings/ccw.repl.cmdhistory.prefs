cmdhistory=["(all-perms [[1 2] [3 4]])" "(list (all-perms [[1 2] [3 4]]))" "(all-perms [[1 2] [3 4]])" "\=>" ">\=" "(all-perms [[1 2] [3 4]])" "(>\= 2 1)" "(all-perms [[1 2] [3 4]])" "<\=" "(all-perms [[1 2] [3 4]])" "(all-perms [[1 2] [3 4 5]])" "(all-perms [[1 2] [3 4 5] [6]])" "(all-perms [[1 2] [3] [4]])" "(all-perms [[1 2 3 4 5] [6 7 8 9 0]])" "(solve-box [2 + [[0 1] [0 0]]] [[0 0]])" "(solve-box [3 + [[0 1] [0 0]]] [[0 0]])" "(solve-box [2 + [[0 1] [0 0]]] [[0 0]])" "(solve-box [2 + [[0 1] [0 0]]] [[0 0] [0 0]])" "(solve-box [2 + [[0 1] [0 0]]] [[0 0]])" "(all-perms [[1 2] [1 2]])" "(solve-box [2 + [[0 1] [0 0]]] [[0 0] [0 0]])" "(solve-box [3 + [[0 1] [0 0]]] [[0 0] [0 0]])" "(solve-box [2 + [[0 1] [0 0]]] [[0 0] [0 0]])" "(get-possible [[0 0] [0 0]] [0 0])" "(solve-box [2 + [[0 1] [0 0]]] [[0 0] [0 0]])" "(solve-mat 3 [[3 + [[0 0] [0 1]]] [9 * [[2 0] [1 0] [2 1]]] [6 * [[1 1] [1 2] [0 2]]] [2 nil [2 2]]])" "(solve-mat 3 [[3 + [[0 0] [0 1]]] [9 * [[2 0] [1 0] [2 1]]] [6 * [[1 1] [1 2] [0 2]]] [2 nil [[2 2]]]])" "(solve-mat 3 [[3 + [[0 0] [0 1]]] [9 * [[2 0] [1 0] [2 1]]] [6 * [[1 1] [1 2] [0 2]]] [2 nil [2 2]]])" "(solve-mat 3 [[3 + [[0 0] [0 1]]] [9 * [[2 0] [1 0] [2 1]]] [6 * [[1 1] [1 2] [0 2]]] [2 nil [[2 2]]]])" "(solve-mat 2 [[3 + [[0 0] [0 1]]] [2 * [[1 0] [1 1]]]])" "(run-maze 10 10)" "(solve-mat 3 [[3 + [[0 0] [0 1]]] [9 * [[2 0] [1 0] [2 1]]] [6 * [[1 1] [1 2] [0 2]]] [2 nil [[2 2]]]])" "(solve-mat 4 [[5 + [[0 0] [0 1]]] \\n              [48 * [[1 0] [1 1] [1 2] [2 2]]]\\n              [2 / [[2 0] [3 0]]]\\n              [2 - [[2 1] [2 3]]]\\n              [6 * [[0 2] [0 3] [1 3]]]\\n              [1 nil [[3 2]]]\\n              [1 - [[2 3] [3 3]]]])" "(solve-mat 4 [[5 + [[0 0] [0 1]]] \\r\\n                 [48 * [[1 0] [1 1] [1 2] [2 2]]]\\r\\n                 [2 / [[2 0] [3 0]]]\\r\\n                 [2 - [[2 1] [3 1]]]\\r\\n                 [6 * [[0 2] [0 3] [1 3]]]\\r\\n                 [1 nil [[3 2]]]\\r\\n                 [1 - [[2 3] [3 3]]]])" "(solve-mat 4 [[5 + [[0 0] [0 1]]] \\r\\n              [48 * [[1 0] [1 1] [1 2] [2 2]]]\\r\\n              [2 / [[2 0] [3 0]]]\\r\\n              [2 - [[2 1] [3 1]]]\\r\\n              [6 * [[0 2] [0 3] [1 3]]]\\r\\n              [1 nil [[3 2]]]\\r\\n              [1 - [[2 3] [3 3]]]])" "(solve-mat 4 [[5 + [[0 0] [0 1]]] \\r\\n                 [48 * [[1 0] [1 1] [1 2] [2 2]]]\\r\\n                 [2 / [[2 0] [3 0]]]\\r\\n                 [2 - [[2 1] [3 1]]]\\r\\n                 [6 * [[0 2] [0 3] [1 3]]]\\r\\n                 [1 nil [[3 2]]]\\r\\n                 [1 - [[2 3] [3 3]]]])" "(row-col-test [[0 0 1] [0 1 1] [1 1 2]])" "(solve-mat 4 [[5 + [[0 0] [0 1]]] \\r\\n                    [48 * [[1 0] [1 1] [1 2] [2 2]]]\\r\\n                    [2 / [[2 0] [3 0]]]\\r\\n                    [2 - [[2 1] [3 1]]]\\r\\n                    [6 * [[0 2] [0 3] [1 3]]]\\r\\n                    [1 nil [[3 2]]]\\r\\n                    [1 - [[2 3] [3 3]]]])" "(empty? '()\\n        )" "(flatten '((((())))))" "(empty? (flatten ((((()))))))" "(empty? (flatten '((((()))))))" "(pretty-print-mat (solve-mat 8 [[8 * [[0 0] [0 1] [1 0]]]\\r\\n                                [5 - [[2 0] [3 0]]]\\r\\n                                [1 - [[4 0] [5 0]]]\\r\\n                                [21 + [[6 0] [6 1] [6 2]]]\\r\\n                                [3 / [[7 0] [7 1]]]\\r\\n                                [19 + [[1 1] [2 1] [3 1] [3 2]]]\\r\\n                                [2 / [[4 1] [5 1]]]\\r\\n                                [5 - [[0 2] [1 2]]]\\r\\n                                [12 + [[2 2] [2 3] [2 4] [3 3]]]\\r\\n                                [42 * [[4 2] [5 2] [4 3]]]\\r\\n                                [2 nil [[7 2]]]\\r\\n                                [672 * [[0 3] [1 3] [0 4] [1 4]]]\\r\\n                                [6 nil [[5 3]]]\\r\\n                                [13 + [[6 3] [6 4] [5 4]]]\\r\\n                                [21 + [[7 3] [7 4] [7 5]]]\\r\\n                                [60 * [[3 4] [3 5] [2 5]]]\\r\\n                                [16 + [[4 4] [4 5] [4 6]]]\\r\\n                                [1 - [[0 5] [1 5]]]\\r\\n                                [4 / [[5 5] [6 5]]]\\r\\n                                [26 + [[0 6] [0 7] [1 7] [2 7]]]\\r\\n                                [7 nil [[1 6]]]\\r\\n                                [5 - [[2 6] [3 6]]]\\r\\n                                [2 / [[5 6] [6 6]]]\\r\\n                                [1 - [[7 6] [7 7]]]\\r\\n                                [7 - [[3 7] [4 7]]]\\r\\n                                [5 + [[5 7] [6 7]]]]))\\r\\n;WHY ARE THERE 3 LISTS?" "(solve-mat 2 [[2 * [[0 0] [0 1]]] [3 + [[1 0] [1 1]]]])" "(full-box-test [[4 4 4] [4 nil [[4 4]]]])" "(full-box-test [[4 4 4]] [4 nil [[4 4]]])" "(all-perms [[0]])" "(get-possible [[0 0 0] [0 0 0] [0 0 0]] [2 2])" "(solve-box [3 nil [[2 2]]] [[0 0 0] [0 0 0] [0 0 0]])" "(solve-mat 3 [3 nil [[2 2]]])" "(solve-mat 3 [[3 nil [[2 2]]]])" "(get-possible [[0 0 0 0 5 4 8 3]\\r\\n[0 0 0 0 0 0 6 1]\\r\\n[3 8 0 0 6 1 7 2]\\r\\n[0 0 0 0 7 6 0 0]\\r\\n[0 0 0 0 0 0 0 0]\\r\\n[0 0 0 0 0 0 0 0]\\r\\n[0 7 0 0 0 0 0 0]\\r\\n[0 0 0 8 1 2 3 0]] [5 1])" "(get-possible [[4 2 8 3 6 5 7 1]\\r\\n[1 5 2 7 4 8 6 3]\\r\\n[6 1 4 5 7 3 8 2]\\r\\n[7 8 3 4 2 6 1 0]\\r\\n[3 4 1 0 0 7 5 0]\\r\\n[0 0 0 0 0 1 4 0]\\r\\n[0 7 6 1 0 4 2 0]\\r\\n[0 0 0 8 1 2 3 0]] [7 7])" "(condp \= 9 8 0 9 1 4)" "(condp \= 8 0 9 1 4)" "(condp \= 8 8 0 9 1 4)" "(condp \= 7 8 0 9 1 4)" "-" "(empty? 1)" "(min-ind-by-fn \#(+ % 2) '(1 2 3 4))" "(min-ind-by-fn \#(+ % 2) '(1 2 3 4 -9))" "(solve-mat 3 [[2 * [[0 0] [0 1] [1 1]]] [1 - [[1 0] [2 0]]] [9 + [[0 2] [1 2] [2 2] [2 1]]]])" "9" "(into '() ((5 6) (7 8)))" "(flatten ((5 6) (7 8)))" "(into '() '((5 6) (7 8)))" "(flatten '((5 6) (7 8)))" "(type [])" "(\= PersistentVector (type []))" "(instance? [] [])" "(conj '() 9)" "(conj 9 '())" "(defn mat-list [coll] \\n  (if (instance? clojure.lang.PersistentVector (first coll))\\n    (conj (mat-list (rest coll)) (first coll))\\n    (conj (mat-list (first coll)) (mat-list (rest coll)))))" "(mat-list ([9]))" "(mat-list '([9]))" "(defn mat-list [coll]\\n  (if (empty? coll) nil\\n    (if (instance? clojure.lang.PersistentVector (first coll))\\r\\n       (conj (mat-list (rest coll)) (first coll))\\r\\n       (conj (mat-list (first coll)) (mat-list (rest coll))))))" "(mat-list '([9]))" "(mat-list '([9] [0] (3)))" "(mat-list '([9] [0] ([3])))" "(Math.random)" "(Math/random)" "(random-mat 3)" "(use op-sudoku-clj.gen-puzzle)" ">\=" "(into '() (clojure.set/difference \#{1 2 3} \#{1 2 3}))"]
eclipse.preferences.version=1
