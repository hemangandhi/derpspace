cmdhistory=["(euler-1 10)" "(euler-1 999)" "(euler-2)" "(euler-3  600851475143)" "(reverse \\"hi\\")" "(palindrome? \\"civic\\")" "(reverse \\"civic\\")" "(.toCharArray \\"civic\\")" "(palindrome? \\"civic\\")" "(euler-4 999 999)" "(euler-4)" "(lcm '(4 12 16))" "(lcm 4 12)" "(euler-5)" "(euler-4)" "(euler-4 999 999)" "(euler-5)" "(euler-4 999 999)" "(+ 0 euler-6)" "(euler-6 101)" "(euler-6 1)" "(euler-6 2)" "(map euler-6 (range 10))" "(n-primes 10001)" "(all-+? '(0 1 2 3 4))" "(all-+? '(1 2 3 4 5))" "(mod 1 2)" "(mod 2 2)" "(n-primes 10)" "(conj '(1 2 3 4) 5)" "(n-primes 10)" "(n-primes 10001)" "(n-primes 100)" "(n-primes (n-primes 101) 9900)" "(n-primes 1000)" "(n-primes 2000)" "(n-primes 1500)" "(n-primes 1250)" "(n-primes 1375)" "(n-primes 10)" "(atom 9)" "(def a9 (atom 9))" "a9" "@a9" "(inc a9)" "(n-primes 10)" "a9" "@a9" "(inc @a9)" "@a9" "(number? a9)" "(number? @a9)" "(n-primes 10)" "(n-primes 10001)" "\=> (n-primes 10001)" "(n-primes 10001)" "(n-primes 10)" "(defn fact [x] (if (\= 0 x) 1 (* x (fact (- x 1)))))" "(fact 10002)" "(def s (lazy-seq fact))" "(take 10002 s)" "(n-primes (n-primes 1001) 9000)" "(fact 9000)" "(defn sum [x] (if (\= 0 x) x (+ x (sum (- x 1)))))" "(sum 9000)" "(sum 5000)" "(sum 7000)" "(sum 8000)" "(sum 8500)" "(sum 8750)" "(sum 8885)" "(sum 9000)" "(sum 10001)" "(str-to-digits \\"1234\\")" "(str-to-digits \\"12345\\")" "(greatest-consec-prod (str-to-digits \\"12345\\") 3)" "(greatest-consec-prod (str-to-digits \\"73167176531330624919225119674426574742355349194934\\r\\n96983520312774506326239578318016984801869478851843\\r\\n85861560789112949495459501737958331952853208805511\\r\\n12540698747158523863050715693290963295227443043557\\r\\n66896648950445244523161731856403098711121722383113\\r\\n62229893423380308135336276614282806444486645238749\\r\\n30358907296290491560440772390713810515859307960866\\r\\n70172427121883998797908792274921901699720888093776\\r\\n65727333001053367881220235421809751254540594752243\\r\\n52584907711670556013604839586446706324415722155397\\r\\n53697817977846174064955149290862569321978468622482\\r\\n83972241375657056057490261407972968652414535100474\\r\\n82166370484403199890008895243450658541227588666881\\r\\n16427171479924442928230863465674813919123162824586\\r\\n17866458359124566529476545682848912883142607690042\\r\\n24219022671055626321111109370544217506941658960408\\r\\n07198403850962455444362981230987879927244284909188\\r\\n84580156166097919133875499200524063689912560717606\\r\\n05886116467109405077541002256983155200055935729725\\r\\n71636269561882670428252483600823257530420752963450\\") 3)" "(greatest-consec-prod (str-to-digits \\"7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450\\") 13)" "(euler9 1000)" "(apply * [9 0])" "(euler9 1000)" "(defn triangle-num [n] (* n (+ 1 n) .5))" "(defn triangle-num [n] (* n (+ 1 n) 1/2))" "(triangle-num 10)" "55N" "(type 55N)" "(type 1/2)" "(defn count-factors [n] (count (for [i (range 1 (+ 1 n)) \:when (\= 0 (mod n i))] i)))" "(count-factors 2)" "(count-factors 55)" "(count-factors 55N)" "(euler12 500)" "(euler12 5)" "(euler12 10)" "(euler12 20)" "(euler12 500)" "1E12" "(apply * (for [x (range 500)] x))" "(gen-24 24 4 200)" "(let [op +] op)" "(let [op +] (apply op 1 1))" "(gen-24 24 4 200)" "(gen-24 24 4 20)" "(gen-24 24 4 200)" "(gen-24 24 4 20)" "(gen-24 24 4 200)" "(gen-24 24 4 20)" "(eval (gen-24 24 4 20))" "(conj 1 '(1 2))" "(get-nums 24 4 20)" "(gen-24 24 4 20)" "(get-nums 24 4 20)" "(* 16 16 16)" "(get-nums 24 4 20)" "(get-nums 24 4 20 \:ops '(+ - * / mod java.lang.Math/pow))" "(get-nums 24 4 20)" "(gen-24 24 4 20)" "(take-last-n 4 '(1 2 3 4 5))" "(gen-24 500 7 10)" "(gen-24 1000 10 10)" "(gen-24 1 2 3)" "(gen-24 5 5 5)" "(gen-24 24 4 20)" "(nth '() 0)" "(def test (gen-24 24 4 20))" "test" "(solve-for-tar 24 test)" "test" "(def a-gen (gen-24 24 4 20))" "a-gen" "(solve-for-tar 24 a-gen)" "a-gen" "(solve-for-tar 24 a-gen)" "(def test-map (hash-map + - - + * / / *))" "test-map" "(test-map +)" "(def test-map (hash-map '+ '- '- '+ '* '/ '/ '*))" "test-map" "(test-map +)" "(get test-map +)" "(test-map '+)" "a-gen" "(solve-for-tar 24 a-gen)" "(solve-for-tar 6 '(1 6 2))" "a-gen" "(solve-for-tar 24 a-gen)" "(quote (first '(0 1 2 3)))" "(solve-for-tar 24 a-gen)" "(first (nth a-gen 1))" "test-map" "(test-map (first (nth a-gen 1)))" "(solve-for-tar 24 a-gen)" "(def test-map (hash-map '+ '- '- '+ '* '/ '/ '*))" "(test-map (first (nth a-gen 1)))" "(solve-for-tar 24 a-gen)" "(list (list 1 2 3))" "(solve-for-tar 24 a-gen)" "(list 1 (list 2 3 4))" "a-gen" "(nth a-gen 1)" "(solve-for-tar 24 a-gen)" "(last a-gen)" "(def a-gen (gen-24 24 2 10))" "a-gen" "(solve-for-tar 24 a-gen)" "(first a-gen)" "(first (nth a-gen 1))" "test-map" "(test-map (first (nth a-gen 1)))" "(list '\= (nth (nth a-gen 1) 1) (list (test-map (first (nth a-gen 1))) (last a-gen) (last (nth a-gen 1))))" "(solve-for-tar 24 '(\= 24 24))" "a-gen" "(solve-for-tar 24 a-gen)" "(solve-for-tar 24 '(\= (- 24 5) 19))" "(solve-for-tar 24 a-gen \:f-map test-map)" "(solve-for-tar 24 a-gen)" "(def a-gen (gen-24 24 60 2))" "(def a-gen (gen-24 24 6 22))" "a-gen" "(solve-for-tar 24 a-gen)" "(eval (solve-for-tar 24 a-gen))" "(eulers-meth (fn [x y] 2) 0 2 1 1)"]
eclipse.preferences.version=1
