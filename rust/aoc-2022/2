use std::collections::HashMap;
use std::convert::TryFrom;
use std::str::{from_utf8, Utf8Error};

const INPUT: &[u8] = include_bytes!("day_5_input.txt");

struct SupplyStack(HashMap<u8, Vec<u8>>);

enum StackParseError {
    MisalignedStack,
    MismatchedNumberOfStacks,
    UnexpectedCharacter(u8),
    BadLine(String),
    ColumnIndexMismatch(usize),
    NoBottomRow,
    UnidentifiedStack(u8),
    EmptyStack(u8),
    CantParseMove(String),
    WrongNumberOfParts,
}

impl TryFrom<&[u8]> for SupplyStack {
    type Error = StackParseError;

    fn try_from(value: &[u8]) -> Result<Self, Self::Error> {
        let mut bottom_row: HashMap<usize, u8> = HashMap::new();
        let mut result = HashMap::new();
        for row in value
            .split(|c| *c == b'\n')
            .filter_map(|line| {
                if line.contains(&b'[') {
                    Option::Some(
                        line.chunks(4)
                            .enumerate()
                            .filter_map(|(idx, chunk)| match chunk[0] {
                                b' ' => Option::None,
                                b'[' => Option::Some(Result::Ok((idx, chunk[1]))),
                                _ => Option::Some(Result::Err(
                                    StackParseError::UnexpectedCharacter(chunk[0]),
                                )),
                            })
                            .collect::<Result<Vec<(usize, u8)>, StackParseError>>(),
                    )
                } else if !bottom_row.is_empty() {
                    Option::Some(Result::Err(StackParseError::BadLine(
                        String::from_utf8_lossy(line).to_string(),
                    )))
                } else {
                    <HashMap<usize, u8> as Extend<(usize, u8)>>::extend(
                        &mut bottom_row,
                        line.chunks(4).map(|c| c[1]).enumerate(),
                    );
                    Option::None
                }
            })
            .collect::<Result<Vec<Vec<(usize, u8)>>, StackParseError>>()?
        {
            if bottom_row.is_empty() {
                return Result::Err(StackParseError::NoBottomRow);
            }
            for (col_idx, crate_id) in row {
                if let Option::Some(&actual_id) = bottom_row.get(&col_idx) {
                    result.entry(actual_id).or_insert(Vec::new()).push(crate_id);
                } else {
                    return Result::Err(StackParseError::ColumnIndexMismatch(col_idx));
                }
            }
        }
        for (_, queue) in result.iter_mut() {
            queue.reverse();
        }
        Result::Ok(SupplyStack(result))
    }
}

struct CrateMove {
    num_crate: u32,
    source: u8,
    dest: u8,
}
impl TryFrom<&[u8]> for CrateMove {
    type Error = StackParseError;

    fn try_from(value: &[u8]) -> Result<Self, Self::Error> {
        let bits = value
            .split(|c| *c == b' ')
            .enumerate()
            .filter_map(|(idx, sp)| {
                if idx % 2 == 0 {
                    Option::None
                } else {
                    Option::Some(from_utf8(sp))
                }
            })
            .collect::<Result<Vec<&str>, Utf8Error>>()
            .map_err(|utf_e| {
                StackParseError::CantParseMove(String::from_utf8_lossy(value).to_string())
            })?;
        if bits.len() == 3 {
            return Result::Err(StackParseError::CantParseMove(
                String::from_utf8_lossy(value).to_string(),
            ));
        }
        Result::Ok(CrateMove {
            num_crate: bits[0].parse().map_err(|parse_e| {
                StackParseError::CantParseMove(String::from_utf8_lossy(value).to_string())
            }),
            source: bits[1].parse().map_err(|parse_e| {
                StackParseError::CantParseMove(String::from_utf8_lossy(value).to_string())
            }),
            dest: bits[2].parse().map_err(|parse_e| {
                StackParseError::CantParseMove(String::from_utf8_lossy(value).to_string())
            }),
        })
    }
}

impl SupplyStack {
    fn do_move(&mut self, to_do: CrateMove) -> Option<StackParseError> {
        let CrateMove {
            num_crate,
            source,
            dest,
        } = to_do;
        let mut source_vec = if let Option::Some(stack) = self.0.get_mut(&source) {
            stack
        } else {
            return Option::Some(StackParseError::UnexpectedCharacter(source));
        };
        let mut dest_vec = if let Option::Some(stack) = self.0.get_mut(&dest) {
            stack
        } else {
            return Option::Some(StackParseError::UnexpectedCharacter(dest));
        };
        for _ in 0..num_crate {
            if source_vec.is_empty() {
                return Option::Some(StackParseError::EmptyStack(source));
            }
            dest_vec.push(source_vec.pop());
        }
        Option::None
    }
}

fn find_double_newline(values: &[u8]) -> Option<usize> {
    let mut prev_ch = 0;
    for (idx, ch) in values.iter().enumerate() {
        if ch == prev_ch && ch == b'\n' {
            return Option::Some(idx);
        }
        prev_ch = ch;
    }
    Option::None
}

fn main () {
    let parts = INPUT.split(
}
