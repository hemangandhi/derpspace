(ns maze-generator.core
  (:import [javax.swing JPanel JFrame]
           [java.awt Graphics]))
 

(defn get-neighbour 
  "Gets neighbours of node [row col] within grid of dims [max-x max-y] and excludes members of bans."
  [[row col] [max-x max-y] bans]
   (reduce conj (for [x [1 -1]
                  :when (and (<= 0 (+ x row)) (< (+ x row) max-x)
                             (not (.contains bans [(+ row x) col])))]
                     [(+ row x) col])
                (for [x [1 -1]
                  :when (and (<= 0 (+ x col)) (< (+ x col) max-y)
                             (not (.contains bans [row (+ x col)])))]
                     [row (+ col x)])))

(defn get-random 
  "Gets random element of a collection or nil for empty collections."
  [coll]
  (if (or (not (coll? coll)) (= 0 (count coll)))
    nil
    (nth coll (int (* (count coll) (java.lang.Math/random))))))

(defn take-first
  "Get the first element of coll that meets pred"
  [pred coll] (if (not (or (coll? coll) (empty? coll)))
                (if (pred (first coll))
                  (first coll)
                  (take-first pred (rest coll)))
                nil))

(defn make-maze 
  "Makes maze of width and height."
  ([width height] (make-maze width height [0 0] '() '()))
  ([width height pos mem conex] (let [next-pos (get-random (get-neighbour pos [width height] mem))]
                                  (if (nil? next-pos)
                                    (let [ok-backtrack 
                                          (get-random
                                            (filter 
                                              #(not (= 0 (count (get-neighbour % [width height] mem))))
                                              mem))]
                                      (if (nil? ok-backtrack)
                                        conex
                                        (make-maze width height ok-backtrack mem conex)))
                                    (make-maze width height next-pos 
                                               (conj (conj mem pos) next-pos) (conj conex [pos next-pos]))))))
 
(defn get-drawn 
  "Convert a matrix location to a screen one with given offset."
  [x offset]
  (* (+ 1 x) offset))

(defn get-disconnected-neighbours 
  "Gets disconnected neighbours for a node within maze [width height] and connections conex."
  [pos [width height] conex]
  (filter #(not (or (.contains conex [pos %]) (.contains conex [% pos]))) (get-neighbour pos [width height] [])))

(defn draw-lines 
  "Draws lines around a node [x y] with connections conex for a maze with dims to Graphics g."
  [[x y] dims conex offset #^Graphics g]
  (dorun (for [[xn yn] (get-disconnected-neighbours [x y] dims conex)]
           (if (= x xn)
             (. g drawLine (+ (get-drawn x offset) (/ offset 2))
               (+ (get-drawn y offset) (* (- yn y) (/ offset 2)))
               (- (get-drawn x offset) (/ offset 2))
               (+ (get-drawn y offset) (* (- yn y) (/ offset 2))))
             (. g drawLine (+ (get-drawn x offset) (* (- xn x) (/ offset 2)))
               (+ (get-drawn y offset) (/ offset 2))
               (+ (get-drawn x offset) (* (- xn x) (/ offset 2)))
               (- (get-drawn y offset) (/ offset 2)))))))

(defn make-panel
  "Makes a JPanel to contain a maze of dimensions given."
  [width height] (proxy [JPanel] []
                   (paintComponent [#^Graphics graphics]
                     (let [conex (make-maze width height)
                           offset 25
                           half-set (/ offset 2)]
                       (dorun (for [x (range width) y (range height)]
                                (draw-lines [x y] [width height] conex offset graphics)))
                       (. graphics drawLine half-set half-set half-set 
                         (- (get-drawn height offset) half-set))
                       (. graphics drawLine half-set half-set 
                         (- (get-drawn width offset) half-set) half-set)
                       (. graphics drawLine (- (get-drawn width offset) half-set) half-set 
                         (- (get-drawn width offset) half-set) 
                         (- (get-drawn height offset) half-set))
                       (. graphics drawLine half-set (- (get-drawn height offset) half-set)
                         (- (get-drawn width offset) half-set)
                         (- (get-drawn height offset) half-set))
                       (. graphics drawOval offset offset (/ offset 3) (/ offset 3))
                       (. graphics drawOval (get-drawn (- width 1) offset) (get-drawn (- height 1) offset)
                         (/ offset 3) (/ offset 3))))))


(defn run-maze
  "Makes a maze window with maze of given dims."
  [width height]
  (doto (JFrame. "Maze!")
    (.setSize 750 750)
    (.add (make-panel width height))
    (.setVisible true)
    (.setDefaultCloseOperation JFrame/DISPOSE_ON_CLOSE)))

;(run-maze 25 25)