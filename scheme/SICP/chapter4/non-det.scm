;quoting from 318
(define apply-in-underlying-scheme apply) ;from footnote 17...
(define (true? x) (not (eq? x false)))
(define (false? x) (eq? x false))

(define (primitive-procedure? proc) (tagged-list? proc 'primitive))
(define (primitive-implementation proc) (cadr proc))

(define primitive-procedures
  (list (list 'car car)
        (list 'cdr cdr)
        (list 'cons cons)
        (list 'null? null?)
        (list 'eq? eq?) ;random additions here on in...
        (list '= =)
        (list '+ +)
        (list '- -)
        (list '* *)
        (list '/ /)
        (list 'mod remainder)
        (list 'expt expt)
        (list 'disp display)))
(define (primitive-procedure-names) (map car primitive-procedures))
(define (primitive-procedure-objects) (map (lambda (proc)
                                             (list 'primitive (cadr proc)))
                                           primitive-procedures))
(define (apply-primitive-procedure proc args)
  (apply-in-underlying-scheme (primitive-implementation proc) args))

(define (enclosing-environment env) (cdr env))
(define (first-frame env) (car env))
(define the-empty-environment '())
(define (make-frame vars vals) (cons vars vals))
(define (frame-variables frame) (car frame))
(define (frame-values frame) (cdr frame))
(define (add-binding-to-frame! var val frame)
  (set-car! frame (cons var (car frame)))
  (set-cdr! frame (cons val (cdr frame))))
(define (extend-environment vars vals base-env)
  (if (= (length vars) (length vals))
    (cons (make-frame vars vals) base-env)
    'ext-len-mismatch))
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars) (env-loop (enclosing-environment env)))
            ((eq? var (car vars)) (car vals))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
      'var-not-found
      (let ((frame (first-frame env)))
        (scan (frame-variables frame)
              (frame-values frame)))))
  (env-loop env))

(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars) (env-loop (enclosing-environment env)))
            ((eq? var (car vars)) (set-car! vals val))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
      'var-not-found-set
      (let ((frame (first-frame env)))
        (scan (frame-variables frame)
              (frame-values frame)))))
  (env-loop env))

(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan vars vals)
      (cond ((null? vars) (add-binding-to-frame! var val frame))
            ((eq? var (car vars)) (set-car! vals val))
            (else (scan (cdr vars) (cdr vals)))))
    (scan (frame-variables frame)
          (frame-values frame))))

(define (setup-environment)
  (let ((initial-env (extend-environment (primitive-procedure-names)
                                        (primitive-procedure-objects)
                                        the-empty-environment)))
    (define-variable! 'true #t initial-env)
    (define-variable! 'false #f initial-env)
    initial-env))
(define the-global-environment (setup-environment))

(define input-prompt ";;; AMB-Eval input:")
(define output-prompt ";;; AMB-Eval value:")
(define (driver-loop)
  (define (internal-loop try-again)
    (prompt-for-input input-prompt)
    (let ((input (read)))
      (if (eq? input 'try-again)
        (try-again)
        (begin (newline)
               (display ";;; New problem!")
               (ambeval input
                        the-global-environment
                        (lambda (val next)
                          (announce-output output-prompt)
                          (user-print val)
                          (internal-loop next))
                        (lambda () 
                          (announce-output ";;; No more values of")
                          (user-print input)
                          (driver-loop)))))))
  (internal-loop
    (lambda () (newline)
      (display ";;; No current problem")
      (driver-loop))))
(define (prompt-for-input str)
  (newline) (newline) (display str) (newline))
(define (announce-output str) (newline) (display string) (newline))

(define (user-print obj)
  (if (compound-procedure? obj)
    (display (list 'compound-procedure
                   (procedure-parameters obj)
                   (procedure-body obj)
                   '<procedure-env>))
    (display obj)))
; quote of pages 310 to 317 -> can't be run yet!

(define (self-evaluating? exp)
  (cond ((number? exp) #t)
        ((string? exp) #t)
        (else #f)))

(define (variable? exp) (symbol? exp))

(define (tagged-list? exp tag)
  (if (pair? exp)
    (eq? (car exp) tag)
    #f))

(define (make-procedure params body env) (list 'procedure params body env))
(define (compound-procedure? exp) (tagged-list? exp 'procedure))
(define (procedure-parameters exp) (cadr exp))
(define (procedure-body exp) (caddr exp))
(define (procedure-environment exp) (cadddr exp))

(define (amb? exp) (tagged-list? exp 'amb))
(define (amb-choices exp) (cdr exp))

(define (ambeval exp env succeed fail)
  ((analyze exp) env succeed fail))

(define (quoted? exp)
  (tagged-list? exp 'quote))
(define (text-of-quotation exp) (cadr exp))

(define (assignment? exp)
  (tagged-list? exp 'set!))
(define (assignment-variable exp) (cadr exp))
(define (assignment-value exp) (caddr exp))

(define (definition? exp)
  (tagged-list? exp 'define))
(define (definition-variable exp)
  (if (symbol? (cadr exp))
    (cadr exp)
    (caadr exp)))
(define (definition-value exp)
  (if (symbol? (cadr exp))
    (caddr exp)
    (make-lambda (cdadr exp)
                 (cddr exp))))

(define (lambda? exp) (tagged-list? exp 'lambda))
(define (lambda-parameters exp) (cadr exp))
(define (lambda-body exp) (cddr exp))
(define (make-lambda parameters body)
  (cons 'lambda (cons parameters body)))

(define (if? exp) (tagged-list? exp 'if))
(define (if-predicate exp) (cadr exp))
(define (if-consequent exp) (caddr exp))
(define (if-alternative exp)
  (if (not (null? (cdddr exp)))
    (cadddr exp)
    'false))
(define (make-if predicate consequent alternative)
  (list 'if predicate consequent alternative))

(define (begin? exp) (tagged-list? exp 'begin))
(define (begin-actions exp) (cdr exp))
(define (last-exp? seq) (null? (cdr seq)))
(define (first-exp seq) (car seq))
(define (rest-exps seq) (cdr seq))
(define (make-begin seq) (cons 'begin seq))

(define (sequence->exp seq)
  (cond ((null? seq) seq)
        ((last-exp? seq) (first-exp seq))
        (else make-begin seq)))

(define (application? exp) (pair? exp))
(define (operator exp) (car exp))
(define (operands exp) (cdr exp))
(define (no-operands? ops) (null? ops))
(define (first-operand ops) (car ops))
(define (rest-operands ops) (cdr ops))

(define (list-of-values exps env)
  (if (no-operands? exps) '()
    (cons (eval (first-operand exps) env)
          (list-of-values (rest-operands exps) env))))

(define (analyze-if exp)
  (let ((pproc (analyze (if-predicate exp)))
        (cproc (analyze (if-consequent exp)))
        (aproc (analyze (if-alternative exp))))
    (lambda (env succeed fail)
      (pproc env
             (lambda (pred-value fail2)
               (if (true? pred-value)
                 (cproc env succeed fail)
                 (aproc env succeed fail)))
             fail))))

(define (analyze-sequence exps)
  (define (sequentially p1 p2)
    (lambda (env succeed fail) (p1 env
                                   (lambda (a-value fail2)
                                     (p2 env succeed fail2))
                                   fail)))
  (define (loop first rest)
    (if (null? rest)
      first
      (loop (sequentially first (car rest))
            (cdr rest))))
  (let ((procs (map analyze exps)))
    (if (null? procs)
      'empty-seq-analyze)
    (loop (car procs) (cdr procs))))

(define (analyze-assignment exp)
  (let ((vproc (analyze (assignment-value exp))))
    (lambda (env succeed fail)
      (vproc env
             (lambda (val fail2)
               (let ((old-value 
                       (lookup-variable-value var env)))
                 (set-variable-value! var val env)
                 (succeed 'ok (lambda ()
                                (set-variable-value! var
                                                     old-value
                                                     env)
                                (fail2)))))
               fail))))

(define (analyze-definition exp)
  (let ((vproc (analyze (definition-value exp))))
    (lambda (env succeed fail)
      (vproc env 
             (lambda (val fail2)
               (define-variable! (definition-variable exp)
                        val env)
               (succeed 'ok fail2))
             fail))))

(define (cond? exp) (tagged-list? exp 'cond))
(define (cond-clauses exp) (cdr exp))
(define (cond-else-clause? clause)
  (eq? (cond-predicate clause) 'else))
(define (cond-predicate clause) (car clause))
(define (cond-actions clause) ;altered for exercise 4.5
  (if (eq? (cadr clause) '=>) 
    (cons (caddr clause) (cond-predicate clause))
    (cdr clause)))
(define (cond->if exp)
  (expand-clauses (cond-clauses exp)))
(define (expand-clauses clauses)
  (if (null? clauses) 'false
    (let ((first (car clauses))
          (rest (cdr clauses)))
      (if (cond-else-clause? first)
        (if (null? rest)
          (sequence->exp (cond-actions first))
          'cond-else-not-last)
        (make-if (cond-predicate first)
                 (sequence->exp (cond-actions first))
                 (expand-clauses rest))))))

;exercise 4.22 -> perhaps not supported...
(define (let? exp) (tagged-list? exp 'let))
(define (let-get-binds exp) (cadr exp))
(define (let-get-body exp) (cddr exp))
(define (bind-get-var exp) (car exp))
(define (bind-get-val exp) (cadr exp))
(define (let->lambda exp)
  (cons (make-lambda (map bind-get-var (let-get-binds exp))
                     (let-get-body exp))
        (map bind-get-val (let-get-binds exp))))
(define (analyze-let exp)
  (analyze (let->lambda exp)))

(define (analyze-application exp)
  (let ((fproc (analyze (operator exp)))
        (aprocs (map analyze (operands exp))))
    (lambda (env succeed fail)
      (fproc env
             (lambda (proc fail2)
               (get-args aprocs
                         env
                         (lambda (args fail3)
                           (execute-application proc args succeed fail3))
                         fail2))
             fail))))

(define (get-args aprocs env succeed fail)
  (if (null? aprocs)
    (succeed '() fail)
    ((car aprocs) env
                  (lambda (arg fail2)
                    (get-args (cdr aprocs)
                              env
                              (lambda (args fail3)
                                (succeed (cons arg args)
                                         fail3))
                              fail2))
                  fail)))

(define (execute-application proc args succeed fail)
  (cond ((primitive-procedure? proc) 
         (succeed (apply-primitive-procedure proc args) fail))
        ((compound-procedure? proc)
         ((procedure-body proc)
          (extend-environment (procedure-parameters proc)
                              args
                              (procedure-environment proc))
          succeed fail))
        (else 'cant-apply-proc)))

(define (analyze-amb exp)
  (let ((cprocs (map analyze (amb-choices exp))))
    (lambda (env succeed fail)
      (define (try-next choices)
        (if (null? choices) (fail)
          ((car choices) env succeed
                         (lambda () (try-next (cdr choices))))))
      (try-next cprocs))))

;; exercises
;4.51
(define (permanent-assn? exp) (tagged-list? exp 'permanent-set!))
(define (perm-assn-var exp) (cadr exp))
(define (perm-assn-val exp) (cddr exp))
(define (analyze-perm-assn exp)
  (let ((vp (analyze (perm-assn-val exp))))
    (lambda (env ok no)
      (vp env
          (lambda (val f2)
            (set-variable-value! (perm-assn-var exp)
                                 val
                                 env)
            (ok 'ok f2))
          no))))

;4.52
(define (if-fail? exp) (tagged-list? exp 'if-fail))
(define (if-fail-pred exp) (cadr exp))
(define (if-fail-conseq exp) (cddr exp))
(define (analyze-if-fail exp)
  (lambda (env ok no)
    ((analyze (if-fail-pred exp))
     env ok (lambda ()
              ((analyze (if-fail-conseq))
               env ok no)))))


(define (analyze exp)
  (cond ((self-evaluating? exp) (analyze-self-evaluating exp))
        ((quoted? exp) (analyze-quoted exp))
        ((variable? exp) (analyze-variable exp))
        ((assignment? exp) (analyze-assignment exp))
        ((permanent-assn? exp) (analyze-perm-assn exp));4.51
        ((definition? exp) (analyze-definition exp))
        ((if? exp) (analyze-if exp))
        ((if-fail? exp) (analyze-if-fail exp));4.52
        ((lambda? exp) (analyze-lambda exp))
        ((begin? exp) (analyze-sequence (begin-actions exp)))
        ((cond? exp) (analyze (cond->if exp)))
        ((let? exp) (analyze-let exp)) ;4.22
        ((amb? exp) (analyze-amb exp))
        ((application? exp) (analyze-application exp))
        (else 'unknown-exp-analyze)))

(define (analyze-self-evaluating exp) (lambda (env succeed fail) (succeed exp fail)))

(define (analyze-quoted exp) (let ((qval (text-of-quotation exp)))
                               (lambda (env succeed fail) (succeed qval fail))))

(define (analyze-variable exp)
  (lambda (env succeed fail) (succeed
                               (lookup-variable-value exp env)
                               fail)))

(define (analyze-lambda exp)
  (let ((vars (lambda-parameters exp))
        (bproc (analyze-sequence (lambda-body exp))))
    (lambda (env succeed fail) 
      (succeed (make-procedure vars bproc env) fail))))

(driver-loop)
